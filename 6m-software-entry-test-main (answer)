/*
    Task 1
    - Create a function that would swap the value of x and y using only x and y as variables.
    - x and y must be numeric.
    - return -1 if x and y is not numeric.
    - print the swapped values in the console if both x and y are numeric.


    Task 2
    - invoke the function "swap" using the following scenarios:
    - "Apple", 10
    - 9, 17
*/

function swap(x, y){
    // Task 1: Add code here
    if ( typeof x != "number" && typeof y != "number")
        return -1;
    else {
        let temp = x;
        x = y;
        y = temp;
        console.log(x + " " + y);
    }
        
        
}

// Task 2: Add code here

    swap("Apple", 10);
    swap(9, 17);

module.exports = swap;


/*
    Task 1: 
    - Declare an array that are going to be used to store patient's name.

    Task 2: 
    - Add code to add patient's name into the array declared in task 1.

    Task 3: 
    - Implement listPatient() function to print all patient's name stored in the array
*/


// Task 1: Add code here

const patientName = [];

function addPatient(Name){

    // Task 2: Add code here
    patientName.push(Name);
}

// Task 3: Add code here
function listPatient(){
    for (let i = 0; i < patientName.length; i++)
        console.log(patientName[i] + "\n");
}
function abc(){
addPatient("John");
addPatient("Mary");
addPatient("Mark");

listPatient(); // This should list ["John", "Mary", "Mark"]
}





/*
    Understand pass by reference with the following articles:
    - https://www.geeksforgeeks.org/pass-by-value-and-pass-by-reference-in-javascript/
    - https://medium.com/front-end-weekly/understanding-pass-by-value-and-pass-by-reference-in-javascript-8e2a0806b175


    Task 1: Modify the code below by using spread operator to clone dog object instead of assignment operator.
    
    Explanation:
    - Currently, console.log("dog", dog) in the last line prints {breed: "cat"}. 
    - When `const cat = dog;` is executed, the reference of dog object is passed to cat. Hence, both cat and dog object shares the same reference
    - This is why assigned a new value to cat.breed like this: `cat.breed = "cat"`, will also modify the value of `dog.breed`
    - The objective of this task is to not pass dog object as reference to cat object. 
    - We have to clone it. Spread operator is one of many ways to perform cloning in JavaScript.

    Note: Object and Array are passed by reference in JavaScript
*/

const dog = {
    breed: "dog"
}

const cat = {...dog}; // Modify this line

cat.breed = "cat";

console.log("dog", dog); // If success, prints "dog { breed: 'dog' }"

function PassbyReference(obj) {
    let tmp = obj.a;
    obj.a = obj.b;
    obj.b = tmp;
 
    console.log(`Inside Pass By Reference 
        Function -> a = ${obj.a} b = ${obj.b}`);
}
 
let obj = {
    a: 10,
    b: 20
 
}
console.log(`Before calling Pass By Reference 
    Function -> a = ${obj.a} b = ${obj.b}`);
 
PassbyReference(obj)
 
console.log(`After calling Pass By Reference 
    Function -> a = ${obj.a} b = ${obj.b}`);



/*
    Task 1: 
    - Implement a Child class that extends the Parent.
    - Add a constructor to the Child class can calls super().
    - Implement a new function addNewAbilities(newAbility) in the Child class where the new ability will be added to the Parent's #abilities array.     
*/
class Parent{
    abilities = []

    constructor(){
        this.abilities.push("Parenting");
        this.abilities.push("Role modeling");
    }

    showAbilities(){
        console.log("These are the abilities:")
        for(const a of this.abilities){
            console.log(a);
        }
    }
}

const p = new Parent();
p.showAbilities(); // Observe that this function prints "Parenting" and "Role modeling".

// Task 1: Add code here
class Child extends Parent{

    constructor(){
        super();
        
    }

    showAbilities(){
        console.log("These are the abilities:")
        for(const a of this.abilities){
            console.log(a);
        }
    }

    addNewAbility(newAbility){
        abilities.push(newAbility);
    }



}

const c = new Child();
c.addNewAbility("Dancing");
c.showAbilities(); // This function should print "Parenting", "Role modeling" and "Dancing".






/*
    Task 1:
    - Link the file `external.js` to this file.
    - To test if the linking works, open q5-output.html using VScode's Live Server extension. It should print "Hello World!"
*/

// Task 1: Add code here
<script type="text/javascript" src="external.js"></script>

// Do not change the code below
document.querySelector("#test").innerHTML = print();




let person = {
  firstName : "Jane",
  lastName :  "Smith",
  hobby : "swimming"
}

/*
Explanation:
Destructuring is a way of extracting multiple values from data stored in objects and arrays. It allows us to have an array or object that we are working with, but we only need some of the items contained in these.
- https://www.w3schools.com/react/react_es6_destructuring.asp

The form of this function is using the arrow function format. It allows for short syntax among other things.
- https://www.w3schools.com/react/react_es6_arrow.asp

Task 1: Modify this function to use object destructuring for the inputs to display only the first name and hobby properties of the object to the console:
*/
const introduce = () => {
    return "Hello, my name is " + person.firstName + " and I love " +  person.hobby + "!";
}

introduce();

//The output should be "Hello, my name is Jane and I love swimming!"






